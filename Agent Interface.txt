Agent:
For abstraction, the Agent class must store all variables within a hashmap, so fields (variables) can be added and removed as the user desires. In addition, each instance of the class needs an ArrayList of "Triggers," which will determine how an agent behaves.

Local variables:
-HashMap<String, Field> fields
-ArrayList<Trigger> triggers

The Agent class must have a constructor where it is given a pointer to the "Grid" or "Environment" object, so that it may ask the environment to, for example, remove it from the environment (if it has died). Agent must also have an act() method, which will:
 (1) iterate through the triggers
 (2) pick the first trigger (highest priority) that meets all conditions for the trigger to happen and get a handle on it. If no other triggers meet the criteria, the "default" trigger will happen. This is similar to default in a switch statement
 (3) call that trigger's act() or execute() method (either name works), which will depend on the particular trigger.
Agent also needs die() and clone() methods, which will remove it from the environment or put a new agent in the environment with cloned fields, respectively.
Finally, there needs to be a way to add and remove both fields and triggers. These should return boolean values on whether or not they were successful (e.x. would return false if the particular field was not found while trying to removeField().

Note: If we don't want outside access to the Field class (by making it a private inner class), we could change the methods to something like addField(String name, int fieldID) or addField(String name, FieldID fieldID), where FieldID is an enum type defining which type (int, double, char, String) the field is.

Methods:
-Agent(Environment env)
-void act()
-void clone()
-void die()
-boolean addField(Field f)
-boolean removeField(Field f)
-boolean removeField(String name)
-boolean addTrigger(Trigger t)
-boolean removeTrigger(Trigger t)

In addition, Agent needs several helper classes (Field and Trigger). These can be either inner classes or seperate classes. For encapsulation purposes, these classes should be private.