/**
 * Trigger Class
 * 
 * "Triggers" are used to give agents certain behaviors. They represent a boolean expression as created by the user that, when met, causes the agent to perform a certain behavior 	 
 * 
 * @author Daniel Davenport, Grant Hensel, Elliot Penson, and Simon Swenson
 * Wheaton College, CSCI 335, Spring 2013
 */

package edu.wheaton.universalsim.agent;

public class Trigger {

	/**
	 * Triggers are checked in order of priority, with lower numbers coming first
	 */
	private int priority;
	
	/**
	 * String encoding the boolean expression this trigger represents. This string will be converted to a tree of for evaluation
	 */
	private String conditions; 
	
	private BoolExpression expression;
	
	/**
	 * The Agent for which this Trigger will fire.
	 */
	private Agent owner;
	
	/**
	 * Constructor
	 * @param priority Triggers are checked in order of priority, with lower numbers coming first
	 * @param conditions String encoding the boolean expression this trigger represents
	 */
	public Trigger(int priority, String conditions){
		this.priority = priority; 
		this.conditions = conditions; 
		expression = generate(); 
	}
	
	/**
	 * Clone Constructor. Creates a deep copy of the object (new instance variables, not just references).
	 * @param parent The trigger from which to clone.
	 */
	public Trigger(Trigger parent) {
		throw new UnsupportedOperationException();
	}
	
	/**
	 * Clone Constructor required for referring to new agent.
	 * @param parent The trigger from which to clone.
	 * @param owner A reference to the Agent to which this trigger belongs.
	 */
	public Trigger(Trigger parent, Agent owner) {
		this(parent);
		this.owner = owner;
	}
	
	/**
	 * Evaluates the boolean expression represented by this object
	 * @return true/false indicating if the trigger was activated
	 * @throws Exception if the expression was invalid
	 */
	public boolean evaluate() throws Exception{
		return expression.evaluate(); 
	}
	
	/**
	 * Get this trigger's priority
	 * @return the priority
	 */
	public int priority(){
		return priority; 
	}
	
	/**
	 * Get the String representation of this trigger's firing condition
	 * @return the firing condition
	 */
	public String conditions(){
		return conditions; 
	}

	/**
	 * Use an input string generated by the user's creation of a trigger condition to create our BoolExpression tree
	 * @return the root node of the generated tree
	 */
	private BoolExpression generate() {
		System.out.println("Use an input string generated by the user's creation of a trigger condition to create our BoolExpression tree");
		return null;
	}
}
